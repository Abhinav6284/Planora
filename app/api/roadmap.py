# planora/app/api/roadmap.py

from datetime import datetime
from flask import Blueprint, jsonify, logging, request
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..extensions import db
from ..models.project import Project
from ..models.task import Task
# We will reuse the AI project generator
from .ai import generate_project_from_goal
import google.generativeai as genai
import os
import json

bp = Blueprint('roadmap', __name__)

genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))


@bp.route('/data', methods=['GET'])
@jwt_required()
def roadmap_data():
    # ... (this function remains the same as before)
    try:
        user_id = int(get_jwt_identity())
        projects = Project.query.filter_by(user_id=user_id).order_by(
            Project.created_at.desc()).all()

        projects_data = []
        for project in projects:
            project_dict = {
                'id': project.id,
                'name': project.name,
                'description': project.description,
                'status': project.status,
                'tasks': [task.to_dict() for task in project.tasks.order_by(task.due_date.asc())]
            }
            projects_data.append(project_dict)

        return jsonify({'success': True, 'data': {'projects': projects_data}}), 200

    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

# abhinav6284/planora/Planora-4ab166033a1dad0a7ca4cb76b7b906a7dd5dfb66/app/api/roadmap.py


@bp.route('/chat', methods=['POST'])
@jwt_required()
def project_chat_agent():
    """
    Handles AI chat conversations with an intelligent task and project assistant.
    """
    data = request.get_json()
    user_id = int(get_jwt_identity())
    user_message = data.get('message')

    if not user_message:
        return jsonify({'success': False, 'message': 'Message is required.'}), 400

    projects = Project.query.filter_by(user_id=user_id).all()
    project_list = "\n".join(
        [f"- {p.name} (ID: {p.id})" for p in projects]) if projects else "No projects yet."

    prompt = f"""You are 'Planora Agent', an AI assistant that helps users plan their work.

    **USER'S PROJECTS:**
    {project_list}

    **USER'S REQUEST:** "{user_message}"

    **YOUR TASK:**
    Analyze the user's request and choose an action. Respond ONLY with a single, clean JSON object.

    1.  **If the user wants to add a task:**
        - Identify the task title, the project it belongs to, and estimate a duration in minutes.
        - Create a brief, one-sentence description for the task.
        - Format your response like this:
        {{"action": "add_task", "task": {{"title": "Task Title", "description": "A brief description.", "estimated_duration": 60, "project_name": "Project Name"}}}}

    2.  **If the user wants to create a new project:**
        - Format your response like this:
        {{"action": "create_project", "goal": "The user's goal for the new project."}}

    3.  **For any other request (questions, greetings, etc.):**
        - Provide a helpful, conversational answer.
        - Format your response like this:
        {{"action": "answer", "response": "Your conversational reply."}}
    """

    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        cleaned_response = response.text.strip().replace('```json', '').replace('```', '')
        action_plan = json.loads(cleaned_response)

        action = action_plan.get('action')

        if action == 'add_task':
            task_details = action_plan.get('task')
            project_name = task_details.get('project_name')
            project = Project.query.filter(Project.name.ilike(
                f"%{project_name}%"), Project.user_id == user_id).first()

            if not project:
                return jsonify({'success': True, 'reply': f"I couldn't find a project named '{project_name}'.", 'action_taken': 'none'})

            new_task = Task(
                title=task_details.get('title'),
                description=task_details.get('description'),
                estimated_duration=task_details.get('estimated_duration'),
                user_id=user_id,
                due_date=datetime.utcnow()
            )
            project.tasks.append(new_task)
            db.session.commit()

            return jsonify({
                'success': True,
                'reply': f"OK, I've added '{new_task.title}' to the '{project.name}' project for you.",
                'action_taken': 'task_added',
                'new_task': new_task.to_dict()
            })

        # --- THIS IS THE FIX ---
        elif action == 'create_project':
            goal = action_plan.get('goal', 'Untitled Project')
            new_project = Project(name=goal, user_id=user_id,
                                  description="Generated by Planora AI.")
            db.session.add(new_project)
            db.session.commit()
            return jsonify({
                'success': True,
                'reply': f"Great! I've created a new project for you: '{new_project.name}'.",
                'action_taken': 'reload'  # Tells frontend to refresh data
            })
        # --- END OF FIX ---

        else:  # Answer
            return jsonify({'success': True, 'reply': action_plan.get('response'), 'action_taken': 'none'})

    except Exception as e:
        logging.error(
            f"Chat agent failed for user {user_id}. Error: {e}", exc_info=True)
        return jsonify({'success': False, 'message': f'An error occurred: {str(e)}'}), 500
